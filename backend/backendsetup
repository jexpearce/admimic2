#!/bin/bash

# AdMimic Backend Setup Script
# Automates the setup process for development and production

set -e  # Exit on any error

echo "ðŸš€ Setting up AdMimic Backend..."

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Check if Python 3.11+ is installed
check_python() {
    print_status "Checking Python version..."
    
    if command -v python3.11 &> /dev/null; then
        PYTHON_CMD=python3.11
    elif command -v python3 &> /dev/null; then
        PYTHON_CMD=python3
        PYTHON_VERSION=$(python3 --version | cut -d' ' -f2 | cut -d'.' -f1,2)
        if [ "$(printf '%s\n' "3.9" "$PYTHON_VERSION" | sort -V | head -n1)" != "3.9" ]; then
            print_error "Python 3.9+ required, found $PYTHON_VERSION"
            exit 1
        fi
    else
        print_error "Python 3.9+ not found. Please install Python 3.9 or higher."
        exit 1
    fi
    
    print_success "Python found: $($PYTHON_CMD --version)"
}

# Create project directory structure
create_directories() {
    print_status "Creating directory structure..."
    
    directories=(
        "models"
        "services" 
        "uploads"
        "temp"
        "generated"
        "assets"
        "fonts"
        "logs"
    )
    
    for dir in "${directories[@]}"; do
        mkdir -p "$dir"
        print_status "Created directory: $dir"
    done
    
    print_success "Directory structure created"
}

# Create virtual environment
setup_venv() {
    print_status "Setting up virtual environment..."
    
    if [ -d "venv" ]; then
        print_warning "Virtual environment already exists"
        read -p "Remove existing venv and create new one? (y/N): " confirm
        if [[ $confirm == [yY] || $confirm == [yY][eE][sS] ]]; then
            rm -rf venv
        else
            print_status "Using existing virtual environment"
            return
        fi
    fi
    
    $PYTHON_CMD -m venv venv
    print_success "Virtual environment created"
}

# Activate virtual environment and install dependencies
install_dependencies() {
    print_status "Installing Python dependencies..."
    
    # Activate virtual environment
    source venv/bin/activate
    
    # Upgrade pip
    pip install --upgrade pip
    
    # Install dependencies
    if [ -f "requirements.txt" ]; then
        pip install -r requirements.txt
        print_success "Dependencies installed from requirements.txt"
    else
        print_error "requirements.txt not found"
        exit 1
    fi
}

# Setup environment variables
setup_env() {
    print_status "Setting up environment variables..."
    
    if [ ! -f ".env" ]; then
        if [ -f ".env.example" ]; then
            cp .env.example .env
            print_success "Created .env file from .env.example"
            print_warning "Please edit .env file and add your OpenAI API key"
        else
            print_error ".env.example not found"
            exit 1
        fi
    else
        print_warning ".env file already exists"
    fi
}

# Download system fonts (optional)
setup_fonts() {
    print_status "Setting up fonts..."
    
    # Create fonts directory
    mkdir -p fonts
    
    # Try to copy system fonts
    if [[ "$OSTYPE" == "darwin"* ]]; then
        # macOS
        if [ -d "/System/Library/Fonts" ]; then
            cp /System/Library/Fonts/Arial*.ttf fonts/ 2>/dev/null || true
            cp /System/Library/Fonts/Helvetica*.ttc fonts/ 2>/dev/null || true
        fi
    elif [[ "$OSTYPE" == "linux-gnu"* ]]; then
        # Linux
        if [ -d "/usr/share/fonts" ]; then
            find /usr/share/fonts -name "*.ttf" -name "*ejaVu*" -exec cp {} fonts/ \; 2>/dev/null || true
        fi
    fi
    
    print_success "Font setup completed"
}

# Test the installation
test_installation() {
    print_status "Testing installation..."
    
    # Activate virtual environment
    source venv/bin/activate
    
    # Test imports
    python3 -c "
import sys
print(f'Python version: {sys.version}')

try:
    import fastapi
    print('âœ“ FastAPI')
except ImportError as e:
    print('âœ— FastAPI:', e)
    sys.exit(1)

try:
    import openai
    print('âœ“ OpenAI')
except ImportError as e:
    print('âœ— OpenAI:', e)
    sys.exit(1)

try:
    import PIL
    print('âœ“ Pillow')
except ImportError as e:
    print('âœ— Pillow:', e)
    sys.exit(1)

try:
    import rembg
    print('âœ“ rembg')
except ImportError as e:
    print('âœ— rembg:', e)
    sys.exit(1)

try:
    from models.schemas import AdStructure
    print('âœ“ Models import')
except ImportError as e:
    print('âœ— Models import:', e)
    sys.exit(1)

try:
    from services.gpt_analyzer import GPTDesignAnalyzer
    print('âœ“ Services import')
except ImportError as e:
    print('âœ— Services import:', e)
    sys.exit(1)

print('All tests passed!')
"
    
    if [ $? -eq 0 ]; then
        print_success "Installation test passed"
    else
        print_error "Installation test failed"
        exit 1
    fi
}

# Create __init__.py files
create_init_files() {
    print_status "Creating __init__.py files..."
    
    # Create empty __init__.py files for Python packages
    touch models/__init__.py
    touch services/__init__.py
    
    print_success "__init__.py files created"
}

# Main setup function
main() {
    echo "================================"
    echo "    AdMimic Backend Setup"
    echo "================================"
    echo
    
    check_python
    create_directories
    setup_venv
    install_dependencies
    setup_env
    setup_fonts
    create_init_files
    test_installation
    
    echo
    print_success "Setup completed successfully!"
    echo
    echo "Next steps:"
    echo "1. Edit .env file and add your OpenAI API key"
    echo "2. Activate virtual environment: source venv/bin/activate"
    echo "3. Start the server: python main.py"
    echo
    echo "Or use Docker:"
    echo "1. docker build -t admimics-backend ."
    echo "2. docker run -p 8000:8000 --env-file .env admimics-backend"
    echo
}

# Run main function
main "$@"
