#!/bin/bash

# AdMimic Frontend Setup Script
# Automates the setup process for React development environment

set -e  # Exit on any error

echo "ðŸš€ Setting up AdMimic Frontend..."

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Check if Node.js is installed
check_node() {
    print_status "Checking Node.js version..."
    
    if command -v node &> /dev/null; then
        NODE_VERSION=$(node --version | cut -d'v' -f2)
        MAJOR_VERSION=$(echo $NODE_VERSION | cut -d'.' -f1)
        
        if [ "$MAJOR_VERSION" -lt "16" ]; then
            print_error "Node.js 16+ required, found v$NODE_VERSION"
            print_status "Please install Node.js 16 or higher from https://nodejs.org/"
            exit 1
        fi
        
        print_success "Node.js found: v$NODE_VERSION"
    else
        print_error "Node.js not found. Please install Node.js 16+ from https://nodejs.org/"
        exit 1
    fi
}

# Check if npm is installed
check_npm() {
    print_status "Checking npm version..."
    
    if command -v npm &> /dev/null; then
        NPM_VERSION=$(npm --version)
        print_success "npm found: v$NPM_VERSION"
    else
        print_error "npm not found. Please install npm."
        exit 1
    fi
}

# Create project directory structure
create_directories() {
    print_status "Creating directory structure..."
    
    directories=(
        "src/components"
        "src/services"
        "src/utils"
        "src/assets"
        "public"
        "build"
    )
    
    for dir in "${directories[@]}"; do
        mkdir -p "$dir"
        print_status "Created directory: $dir"
    done
    
    print_success "Directory structure created"
}

# Install dependencies
install_dependencies() {
    print_status "Installing dependencies..."
    
    if [ -f "package.json" ]; then
        # Clear npm cache to avoid potential issues
        npm cache clean --force 2>/dev/null || true
        
        # Install dependencies
        npm install
        
        print_success "Dependencies installed successfully"
    else
        print_error "package.json not found"
        exit 1
    fi
}

# Setup environment variables
setup_env() {
    print_status "Setting up environment variables..."
    
    if [ ! -f ".env" ]; then
        cat > .env << EOF
# AdMimic Frontend Environment Configuration
REACT_APP_API_URL=http://localhost:8000
REACT_APP_ENV=development
GENERATE_SOURCEMAP=true
REACT_APP_VERSION=1.0.0
EOF
        print_success "Created .env file"
    else
        print_warning ".env file already exists"
    fi
    
    if [ ! -f ".env.production" ]; then
        cat > .env.production << EOF
# AdMimic Frontend Production Environment
REACT_APP_API_URL=https://your-api-domain.com
REACT_APP_ENV=production
GENERATE_SOURCEMAP=false
REACT_APP_VERSION=1.0.0
EOF
        print_success "Created .env.production file"
    else
        print_warning ".env.production file already exists"
    fi
}

# Create additional config files
create_config_files() {
    print_status "Creating configuration files..."
    
    # Create .gitignore if it doesn't exist
    if [ ! -f ".gitignore" ]; then
        cat > .gitignore << EOF
# Dependencies
/node_modules
/.pnp
.pnp.js

# Testing
/coverage

# Production
/build

# Environment variables
.env.local
.env.development.local
.env.test.local
.env.production.local

# Logs
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Optional npm cache directory
.npm

# ESLint cache
.eslintcache

# Storybook build outputs
.out
.storybook-out

# Temporary folders
tmp/
temp/
EOF
        print_success "Created .gitignore file"
    fi
    
    # Create README if it doesn't exist
    if [ ! -f "README.md" ]; then
        cat > README.md << 'EOF'
# AdMimic Frontend

React application for AdMimic - AI-powered ad transformation tool.

## Quick Start

```bash
npm start          # Start development server
npm run build      # Build for production
npm test           # Run tests
```

## Environment Setup

1. Copy `.env.example` to `.env`
2. Configure your API endpoint
3. Start the development server

## Available Scripts

- `npm start` - Runs the app in development mode
- `npm run build` - Builds the app for production
- `npm test` - Launches the test runner
- `npm run eject` - Ejects from Create React App (one-way operation)

## Technologies

- React 18
- Tailwind CSS
- Axios for API calls
- React Hot Toast for notifications
- Lucide React for icons

## API Integration

The frontend communicates with the FastAPI backend running on port 8000.
Ensure the backend is running before starting the frontend.
EOF
        print_success "Created README.md file"
    fi
}

# Test the installation
test_installation() {
    print_status "Testing installation..."
    
    # Test if we can start the development server (dry run)
    print_status "Checking if build process works..."
    
    # Check if all required files exist
    required_files=(
        "package.json"
        "src/App.js"
        "src/index.js"
        "public/index.html"
        "tailwind.config.js"
        "postcss.config.js"
    )
    
    missing_files=()
    for file in "${required_files[@]}"; do
        if [ ! -f "$file" ]; then
            missing_files+=("$file")
        fi
    done
    
    if [ ${#missing_files[@]} -eq 0 ]; then
        print_success "All required files present"
    else
        print_error "Missing required files:"
        for file in "${missing_files[@]}"; do
            print_error "  - $file"
        done
        exit 1
    fi
    
    # Test npm scripts
    if npm run build --dry-run &>/dev/null; then
        print_success "Build process test passed"
    else
        print_warning "Build process test could not be verified"
    fi
}

# Setup development tools
setup_dev_tools() {
    print_status "Setting up development tools..."
    
    # Create VS Code settings (optional)
    if command -v code &> /dev/null; then
        mkdir -p .vscode
        
        if [ ! -f ".vscode/settings.json" ]; then
            cat > .vscode/settings.json << EOF
{
  "editor.formatOnSave": true,
  "editor.defaultFormatter": "esbenp.prettier-vscode",
  "editor.codeActionsOnSave": {
    "source.fixAll.eslint": true
  },
  "emmet.includeLanguages": {
    "javascript": "javascriptreact"
  },
  "tailwindCSS.experimental.classRegex": [
    "tw\\\`([^`]*)\\\`",
    "tw=\"([^\"]*)",
    "tw={\"([^}]*)"}",
    "tw\\\\.\\\\w+\\\`([^`]*)\\\`",
    "tw\\\\(.*?\\\\)\\\`([^`]*)\\\`"
  ]
}
EOF
            print_success "Created VS Code settings"
        fi
        
        if [ ! -f ".vscode/extensions.json" ]; then
            cat > .vscode/extensions.json << EOF
{
  "recommendations": [
    "esbenp.prettier-vscode",
    "bradlc.vscode-tailwindcss",
    "ms-vscode.vscode-typescript-next",
    "formulahendry.auto-rename-tag",
    "christian-kohler.path-intellisense"
  ]
}
EOF
            print_success "Created VS Code extensions recommendations"
        fi
    fi
    
    print_success "Development tools setup completed"
}

# Check backend connectivity
check_backend() {
    print_status "Checking backend connectivity..."
    
    if command -v curl &> /dev/null; then
        if curl -s http://localhost:8000/health &>/dev/null; then
            print_success "Backend is running and accessible"
        else
            print_warning "Backend not accessible at http://localhost:8000"
            print_status "Make sure to start the backend server before using the frontend"
        fi
    else
        print_warning "curl not available - cannot test backend connectivity"
    fi
}

# Main setup function
main() {
    echo "================================"
    echo "   AdMimic Frontend Setup"
    echo "================================"
    echo
    
    check_node
    check_npm
    create_directories
    install_dependencies
    setup_env
    create_config_files
    setup_dev_tools
    test_installation
    check_backend
    
    echo
    print_success "Frontend setup completed successfully!"
    echo
    echo "Next steps:"
    echo "1. Start the backend server: cd ../backend && python main.py"
    echo "2. Start the frontend: npm start"
    echo "3. Open your browser to http://localhost:3000"
    echo
    echo "Development commands:"
    echo "  npm start          # Start development server"
    echo "  npm run build      # Build for production"
    echo "  npm test           # Run tests"
    echo
}

# Run main function
main "$@"
