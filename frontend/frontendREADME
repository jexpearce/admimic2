# AdMimic Frontend

## Overview

Modern React application for AdMimic - an AI-powered tool that transforms any advertisement into your branded version. Features a clean, intuitive interface with a multi-step workflow that guides users through ad analysis, brand asset upload, text customization, and final ad generation.

## Features

### ðŸŽ¯ Core Functionality
- **Ad Upload & Analysis** - Drag & drop interface with GPT-4o design analysis
- **Brand Asset Processing** - Logo and product image upload with automatic optimization
- **Text Customization** - Intelligent text replacement with suggestions
- **Final Ad Generation** - High-quality rendered output with download options

### âœ¨ User Experience
- **Multi-step Wizard** - Clear progress indication and navigation
- **Real-time Validation** - Instant feedback on file uploads and form inputs
- **Loading States** - Informative progress indicators during AI processing
- **Error Handling** - Graceful error recovery with helpful messages
- **Responsive Design** - Works seamlessly on desktop, tablet, and mobile

### ðŸ›  Technical Features
- **Modern React 18** - Latest React features with functional components and hooks
- **Tailwind CSS** - Utility-first styling with custom design system
- **Axios Integration** - Robust API communication with interceptors
- **File Upload** - Advanced drag & drop with validation and previews
- **Toast Notifications** - User-friendly feedback system
- **Error Boundaries** - Comprehensive error handling and recovery

## Architecture

### Component Structure

```
src/
â”œâ”€â”€ App.js                    # Main application orchestrator
â”œâ”€â”€ services/
â”‚   â””â”€â”€ api.js               # API service layer
â”œâ”€â”€ components/
â”‚   â”œâ”€â”€ AdUploadStep.js      # Step 1: Ad upload and validation
â”‚   â”œâ”€â”€ BrandAssetsStep.js   # Step 2: Brand asset processing
â”‚   â”œâ”€â”€ TextReplacementStep.js # Step 3: Text customization
â”‚   â”œâ”€â”€ FinalAdStep.js       # Step 4: Download and results
â”‚   â”œâ”€â”€ LoadingSpinner.js    # Loading state component
â”‚   â””â”€â”€ ErrorBoundary.js     # Error handling component
â”œâ”€â”€ App.css                  # Styles and Tailwind imports
â””â”€â”€ index.js                 # Application entry point
```

### Design System

**Colors:**
- Primary: Blue (`#3b82f6`) - Actions and highlights
- Success: Green (`#22c55e`) - Confirmations and success states
- Error: Red (`#ef4444`) - Errors and warnings
- Gray: Neutral tones for text and backgrounds

**Typography:**
- Font: Inter (Google Fonts) 
- Weights: 300-800 for different emphasis levels
- Responsive sizing with Tailwind utilities

**Components:**
- Cards with soft shadows and rounded corners
- Button variants (primary, secondary, success, error)
- Form inputs with focus states and validation
- Loading animations and progress indicators

## Installation

### Prerequisites
- Node.js 16+ 
- npm 7+
- Backend server running on port 8000

### Quick Setup

```bash
# Automated setup
chmod +x setup.sh
./setup.sh

# Manual setup
npm install
npm start
```

### Environment Configuration

Create `.env` file:
```bash
REACT_APP_API_URL=http://localhost:8000
REACT_APP_ENV=development
GENERATE_SOURCEMAP=true
REACT_APP_VERSION=1.0.0
```

## Development

### Available Scripts

```bash
npm start          # Development server (http://localhost:3000)
npm run build      # Production build
npm test           # Run test suite
npm run eject      # Eject from Create React App (irreversible)
```

### Development Workflow

1. **Start Backend** - Ensure API server is running on port 8000
2. **Start Frontend** - `npm start` launches dev server with hot reload
3. **File Watching** - Changes automatically trigger rebuilds
4. **API Proxy** - Development server proxies API calls to backend

### Code Organization

**State Management:**
- React hooks (useState, useEffect) for local state
- Props drilling for component communication
- Context API available for future global state needs

**API Layer:**
- Centralized API service in `services/api.js`
- Axios interceptors for request/response handling
- Automatic error handling and toast notifications
- File upload progress tracking

**Component Patterns:**
- Functional components with hooks
- Props validation with default values
- Error boundaries for graceful failures
- Loading states for async operations

## API Integration

### Workflow API Calls

1. **POST `/analyze-ad`** - Upload and analyze inspiration ad
2. **POST `/process-brand-assets`** - Upload logo, product, set colors
3. **POST `/generate-ad`** - Generate final branded advertisement
4. **GET `/download-ad/{session_id}`** - Download generated ad

### Error Handling

- **Network Errors** - Automatic retry with user notification
- **Validation Errors** - Field-level error display
- **Server Errors** - Graceful fallback with helpful messages
- **File Errors** - Detailed validation feedback

### Session Management

- Session IDs track user progress through workflow
- Automatic cleanup prevents data leaks
- Progress persistence during page refresh
- Session timeout handling

## Styling & Design

### Tailwind CSS Integration

```css
/* Custom utilities in App.css */
.btn-primary { @apply px-6 py-3 bg-primary-600 text-white... }
.card { @apply bg-white border border-gray-200 rounded-xl... }
.dropzone { @apply border-2 border-dashed rounded-xl... }
```

### Responsive Design

- **Mobile First** - Design scales up from mobile
- **Breakpoints** - sm: 640px, md: 768px, lg: 1024px, xl: 1280px
- **Grid System** - CSS Grid and Flexbox for layouts
- **Touch Friendly** - Larger tap targets on mobile

### Accessibility

- **Semantic HTML** - Proper heading hierarchy and landmarks
- **ARIA Labels** - Screen reader support for complex interactions
- **Keyboard Navigation** - Full keyboard accessibility
- **Focus Management** - Visible focus indicators
- **Color Contrast** - WCAG AA compliant color combinations

## Performance

### Optimization Strategies

- **Code Splitting** - Automatic route-based splitting
- **Image Optimization** - Responsive images and lazy loading
- **Bundle Analysis** - Webpack Bundle Analyzer for size monitoring
- **Caching** - Aggressive caching for static assets

### Loading Performance

- **Critical CSS** - Inline critical styles in HTML
- **Font Loading** - Optimized Google Fonts loading
- **Resource Hints** - Preconnect and DNS prefetch
- **Service Worker** - Offline caching (production only)

### Metrics Monitoring

```javascript
// Web Vitals tracking
import { reportWebVitals } from './reportWebVitals';
reportWebVitals(console.log); // Log to console in development
```

## Testing

### Test Strategy

- **Unit Tests** - Component logic and utilities
- **Integration Tests** - API service layer
- **E2E Tests** - Complete user workflows
- **Visual Testing** - Component styling and layouts

### Running Tests

```bash
npm test                    # Interactive test runner
npm test -- --coverage     # With coverage report
npm test -- --watchAll     # Watch all files
```

## Deployment

### Production Build

```bash
npm run build              # Creates optimized build/
serve -s build            # Serve locally for testing
```

### Environment Configuration

Production `.env.production`:
```bash
REACT_APP_API_URL=https://api.yourdomain.com
REACT_APP_ENV=production
GENERATE_SOURCEMAP=false
```

### Deployment Options

- **Static Hosting** - Netlify, Vercel, AWS S3
- **CDN Integration** - CloudFront, CloudFlare
- **Docker** - Containerized deployment
- **CI/CD** - GitHub Actions, GitLab CI

## Browser Support

- **Modern Browsers** - Chrome 90+, Firefox 88+, Safari 14+, Edge 90+
- **Mobile Browsers** - iOS Safari 14+, Chrome Mobile 90+
- **Progressive Enhancement** - Graceful degradation for older browsers

## Dependencies

### Core Dependencies
```json
{
  "react": "^18.2.0",
  "react-dom": "^18.2.0",
  "axios": "^1.6.0",
  "react-hot-toast": "^2.4.1",
  "react-dropzone": "^14.2.3",
  "lucide-react": "^0.263.1"
}
```

### Development Dependencies
```json
{
  "tailwindcss": "^3.3.6",
  "autoprefixer": "^10.4.16", 
  "postcss": "^8.4.32"
}
```

## Troubleshooting

### Common Issues

**Backend Connection Errors:**
- Verify backend is running on port 8000
- Check CORS configuration
- Ensure API endpoints match

**Build Failures:**
- Clear npm cache: `npm cache clean --force`
- Delete node_modules and reinstall
- Check Node.js version compatibility

**Styling Issues:**
- Ensure Tailwind is processing correctly
- Check PostCSS configuration
- Verify import order in App.css

### Debug Mode

Enable debug logging:
```bash
REACT_APP_DEBUG=true npm start
```

## Contributing

### Code Standards
- ESLint configuration for consistent formatting
- Prettier for code formatting
- Conventional commits for git messages
- Component documentation with JSDoc

### Development Setup
1. Fork the repository
2. Create feature branch: `git checkout -b feature-name`
3. Make changes with tests
4. Submit pull request with description

## Performance Monitoring

### Core Web Vitals
- **LCP** (Largest Contentful Paint) < 2.5s
- **FID** (First Input Delay) < 100ms  
- **CLS** (Cumulative Layout Shift) < 0.1
- **TTFB** (Time to First Byte) < 800ms

### Monitoring Tools
- Chrome DevTools Lighthouse
- Web Vitals extension
- Real User Monitoring (RUM)

---

**Ready to transform ads with AI!** ðŸš€

Start the backend, run `npm start`, and visit http://localhost:3000 to begin creating AI-powered advertisements.
